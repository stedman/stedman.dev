<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>stedman.dev</title>
  <subtitle>The @stedman home range.</subtitle>
  <link rel="self" href="https://stedman.dev/atom.xml"/>
  <link href="https://stedman.dev/"/>
  <updated>2021-09-06T21:32:52Z</updated>
  <id>https://stedman.dev/</id>
  <author>
    <name>Steve Stedman</name>
  </author>
  <entry>
    <title>Austin JavaScript Case Study</title>
    <link href="https://stedman.dev/2020/07/23/austin-javascript-case-study/"/>
    <id>https://stedman.dev/2020/07/23/austin-javascript-case-study/</id>
    <published>2021-09-06T21:32:52Z</published>
    <updated>2021-09-06T21:32:52Z</updated>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://austinjavascript.com/&quot;&gt;Austin JavaScript&lt;/a&gt; (AustinJS) is a tech meetup organization with a proud history of involvement from local hackers to JavaScript industry giants. For over ten years, it’s provided timely and relevant JavaScript knowledge while serving as a key social network for the Austin web development community. If it has &lt;em&gt;anything&lt;/em&gt; to do with JavaScript, it’s being talked about at AustinJS.&lt;/p&gt;
&lt;p&gt;So it was always a bit ironic that JavaScript as a technology didn’t play a bigger role in the AustinJS website. Granted, a key consideration was performance on mobile devices and client-side JavaScript can degrade rendering speeds and battery life if not crafted properly. But even on the server-side, there wasn’t a contribution model in the &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node&lt;/a&gt; world that quite fit AustinJS’s needs. This volunteer organization’s content management system needed to be simple, deployments needed to be effortless, and whatever was chosen needed to be free.&lt;/p&gt;
&lt;figure class=&quot;image browser-window&quot;&gt;
  &lt;img src=&quot;https://stedman.dev/assets/img/posts/austinjs-2013.png&quot; alt=&quot;Austin JavaScript (WordPress), 2013&quot; /&gt;
  &lt;figcaption&gt;AustinJavaScript.com, circa 2013&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The site was initially set up in 2010 on &lt;a href=&quot;https://wordpress.org/&quot;&gt;WordPress&lt;/a&gt; (PHP) and then moved to &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; and &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; (Ruby) in 2015. As a publishing platform, the GitHub Pages + Jekyll duo is a hard combination to beat. It’s rock-solid, easy to update (even with a mobile device), deployments are invisible, and it’s free.&lt;/p&gt;
&lt;p&gt;But it’s not JavaScript. Worse, Jekyll runs on Ruby which is a challenging ecosystem for the uninitiated to set up locally. This impeded layout and design contributions, so not much evolved on the site beyond 2015.&lt;/p&gt;
&lt;figure class=&quot;image browser-window&quot;&gt;
  &lt;img src=&quot;https://stedman.dev/assets/img/posts/austinjs-2016.png&quot; alt=&quot;Austin JavaScript (Jekyll), 2016&quot; /&gt;
  &lt;figcaption&gt;AustinJavaScript.com, circa 2016&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Fast-forward to 2020. The JavaScript community now has a wide variety of capable Jekyll alternatives. Better yet, the automated build and deploy process that Jekyll enjoys on GitHub Pages can be replicated with the recently released &lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub Actions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was time to rebuild AustinJS on JavaScript.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On this page: &lt;a href=&quot;https://stedman.dev/2020/07/23/austin-javascript-case-study/#1-the-prep&quot;&gt;The prep&lt;/a&gt; &amp;gt; &lt;a href=&quot;https://stedman.dev/2020/07/23/austin-javascript-case-study/#2-the-pitch&quot;&gt;The pitch&lt;/a&gt; &amp;gt; &lt;a href=&quot;https://stedman.dev/2020/07/23/austin-javascript-case-study/#3-the-pivot&quot;&gt;The pivot&lt;/a&gt; &amp;gt; &lt;a href=&quot;https://stedman.dev/2020/07/23/austin-javascript-case-study/#4-the-launch&quot;&gt;The launch&lt;/a&gt; &amp;gt; &lt;a href=&quot;https://stedman.dev/2020/07/23/austin-javascript-case-study/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1.-the-prep&quot;&gt;1. The prep &lt;/h2&gt;
&lt;p&gt;Before approaching the AustinJS organizers, I wanted to have a decent proof of concept to share. I figured I’d push some of the current content through a JavaScript engine, throw a fresh coat of paint on it, and see what folks thought.&lt;/p&gt;
&lt;h3 id=&quot;discovery&quot;&gt;Discovery &lt;/h3&gt;
&lt;p&gt;Before starting, I put on my project management hat and did some fieldwork. Their GitHub repo had been up for five years, so there was plenty of material to research:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Content: patterns of use (and evolutions in those patterns)&lt;/li&gt;
&lt;li&gt;GitHub Pull Requests: issues that need to be addressed by code change&lt;/li&gt;
&lt;li&gt;GitHub Issues: issues that need to be addressed&lt;/li&gt;
&lt;li&gt;Templates/other code: comments, FIXMEs, and TODOs&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;goals&quot;&gt;Goals &lt;/h3&gt;
&lt;p&gt;After the research, my initial goals were simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;maintain content parity (while the engine and the design might change, the content should remain the same)&lt;/li&gt;
&lt;li&gt;keep all of Jekyll’s ease of use (e.g., YAML front matter for meta data, Markdown content, straightforward templating)&lt;/li&gt;
&lt;li&gt;keep the lightweight and responsive static pages&lt;/li&gt;
&lt;li&gt;keep GitHub Pages’ auto build and deploy functionality&lt;/li&gt;
&lt;li&gt;improve the contributor experience (e.g., meetup posts, site templates)&lt;/li&gt;
&lt;li&gt;improve the user experience with a visual design refresh&lt;/li&gt;
&lt;li&gt;reduce dependencies (especially those requiring additional services and logins; Travis and Cloudflare, for example)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;proof-of-concept&quot;&gt;Proof of concept &lt;/h3&gt;
&lt;h4&gt;Generator&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://gatsbyjs.com/&quot;&gt;Gatsby&lt;/a&gt; seemed like a solid JavaScript static site generator (SSG) choice. Based on ReactJS, it has tons of documentation, a good Jekyll migration path, and a supportive community.&lt;/p&gt;
&lt;h4&gt;Style&lt;/h4&gt;
&lt;p&gt;I also decided to give the CSS framework &lt;a href=&quot;https://bulma.io/&quot;&gt;Bulma&lt;/a&gt; a shot as it is lightweight, flexible, and well-documented. For this community project, I figured that it’s also important to make design contribution as frictionless as possible. Bulma impressed me as hitting that sweet spot of capability and ease of use.&lt;/p&gt;
&lt;h4&gt;Content&lt;/h4&gt;
&lt;p&gt;Keeping Jekyll’s YAML front matter + Markdown content layout was never a question. It’s a tried and true system that’s been adopted by all the Jekyll alternatives. The home page, about page, etc. migrated without a hitch.&lt;/p&gt;
&lt;p&gt;I took a closer look at the 100+ meetup posts from the past ten years. Details such as speaker names, bios, avatars, sponsor names, and venue locations in the Markdown could be standardized and moved up into the YAML front matter. This front matter data can then be used in the current page or elsewhere on the site. Standardizing the data format also makes linting and/or pre-flight field checks possible before allowing pull requests to be opened.&lt;/p&gt;
&lt;p&gt;Thus, a &lt;a href=&quot;https://github.com/austinjavascript/austinjavascript.com/blob/v2-eol/_posts/2020-02-16-meetup.md&quot;&gt;typical original meetup (&lt;code&gt;2020-02-16-meetup.md&lt;/code&gt;)&lt;/a&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Absolute Unit Tests with Jest and Enzyme&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kevin&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; post&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; posts&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; meetups&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token datetime number&quot;&gt;2020-02-18T19:30:00-06:00&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;% assign speakr = &#39;Nick Gottschlich&#39; %&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;% assign twiturl = &#39;https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//twitter.com/nickgottschlich/&#39; %&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;% assign huburl = &#39;https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//github.com/nick&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;gottschlich/&#39; %&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;% assign website = &#39;http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//nickpgott.com&#39; %&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Everything you wanted to know about testing React components with Jest and Enzyme&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt; Learn what a unit test is&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; why its useful&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;and how to test things like&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; existence of react components&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; simulated clicks and other events&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mocking data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; snapshots and more&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;### Our speaker&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;div class=&quot;media&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;object speaker&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;bio&quot;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &amp;lt;a href=&quot;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; twiturl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &amp;lt;img alt=&quot;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; speakr &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; @NickGottschlich on Twitter&quot;&lt;br /&gt;      src=&quot;https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//pbs.twimg.com/profile_images/1029847332781740032/Gp54dk3Z_400x400.jpg&quot; /&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &amp;lt;/a&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &amp;lt;div&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &amp;lt;a href=&quot;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; twiturl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&amp;lt;strong&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; speakr &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&amp;lt;/strong&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&amp;lt;/a&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Software Engineer at Procore Technologies&lt;br /&gt;  &amp;lt;p&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;Twitter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &amp;lt;a href=&quot;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; twiturl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;@NickGottschlich&amp;lt;/a&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &amp;lt;/p&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &amp;lt;p&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;Website&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &amp;lt;a href=&quot;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; website &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//nickpgott.com/&amp;lt;/a&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &amp;lt;/p&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &amp;lt;p&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;Github&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &amp;lt;a href=&quot;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; huburl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;nick&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;gottschlich&amp;lt;/a&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &amp;lt;/p&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &amp;lt;/div&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&amp;lt;/div&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Make sure to thank our gracious host &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Cloudflare&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;% include give&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;em&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;the&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;business.html location=&#39;cloudflare&#39; %&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Check back here or &amp;lt;a href=&quot;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; site.twitter.url &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&quot;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;follow us on Twitter&amp;lt;/a&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;for updates.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cloudflare&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//www.cloudflare.com/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…was transformed into the following concise post:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; meetup&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Absolute Unit Tests with Jest and Enzyme&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;speakers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Nick Gottschlich&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Software Engineer at Procore Technologies&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;avatar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//pbs.twimg.com/profile_images/1029847332781740032/Gp54dk3Z_400x400.jpg&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;bio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;homepage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//nickpgott.com&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; NickGottschlich&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nick&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;gottschlich&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;linkedin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;sponsor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cloudflare&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;venue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cloudflare&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; lavaca&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;organizers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; lingram&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; astacy&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Everything you wanted to know about testing React components with &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Jest&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;(https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//jestjs.io/) and &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Enzyme&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;(https&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//enzymejs.github.io/enzyme/) Learn what a unit test is&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; why its useful&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;and how to test things like&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; existence of react components&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; simulated clicks and other events&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mocking data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; snapshots and more&lt;span class=&quot;token tag&quot;&gt;!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: To help contributors, I created a &lt;a href=&quot;https://github.com/austinjavascript/austinjavascript.com/blob/master/CONTRIBUTING-POSTS.md&quot;&gt;how to contribute to posts&lt;/a&gt; document that provides more details about each field. The mechanics of how it all works is a bit more involved and would be a great topic for another blog post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You may have noticed that the &lt;code&gt;when&lt;/code&gt; and &lt;code&gt;categories&lt;/code&gt; fields were omitted in the new version above.&lt;/p&gt;
&lt;h5&gt;When&lt;/h5&gt;
&lt;p&gt;In Jekyll-land, the first part of the post file name (e.g., &lt;code&gt;2020-02-18-meetup.md&lt;/code&gt;) contains the publish date. AustinJS organizers were unable to use future publish dates because Jekyll throws an error. So organizers added the &lt;code&gt;when&lt;/code&gt; front matter field to represent the meetup date in the future. Unfortunately they also used it for the meeting &lt;strong&gt;time&lt;/strong&gt; as well. While analyzing past pull requests, I noticed all sorts of Daylight Saving Time snafus that required subsequent PRs to remedy.&lt;/p&gt;
&lt;p&gt;Gatsby didn’t throw errors if file names had future dates so I was able to dispose of the &lt;code&gt;when&lt;/code&gt; field. Oh, and since almost every one of the 100 or so meetups started at 7:30pm and ended at 9pm, I was able to hardwire that into the template as well.&lt;/p&gt;
&lt;h5&gt;Categories&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;categories&lt;/code&gt; front matter field generates the site sub-folders—at least in the AustinJS Jekyll setup. Using our example from above, the output file path looks like:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;/&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;cat-1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;/&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;cat-2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;/&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;/    # format&lt;br /&gt;/posts/meetups/2020/02/18/  # actual&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With Gatsby, the permalink format is defined in the &lt;code&gt;gatsby-node.js&lt;/code&gt; file, so the &lt;code&gt;categories&lt;/code&gt; front matter fields are completely unnecessary.&lt;/p&gt;
&lt;h2 id=&quot;2.-the-pitch&quot;&gt;2. The pitch &lt;/h2&gt;
&lt;p&gt;After wrangling Gatsby, Bulma, and a sample of content for a few days, I soon had a &lt;a href=&quot;https://github.com/austinjavascript/austinjavascript.com/issues/105&quot;&gt;proof of concept&lt;/a&gt; to share with AustinJS leadership.&lt;/p&gt;
&lt;p&gt;Aaron Stacey, long-time AustinJS organizer and developer of the second gen site, was pleased with the idea of it all but added that an MVP (minimal viable product) would include the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deploy on push&lt;/li&gt;
&lt;li&gt;Have a low page weight&lt;/li&gt;
&lt;li&gt;Look good on mobile&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hooray! We agreed on goals. But then Aaron pointed out the page weight. My Gatsby-powered home page had ballooned to 30 times the size of the Jekyll-powered version. It now weighed-in at over 3GB. What the heck? Sure it was speedy on my desktop, but there were valid concerns about load times for mobile devices.&lt;/p&gt;
&lt;p&gt;Gatsby hydrates the initial page after the static bits load and subsequent page loads are routed through ReactJS. So, as you can imagine, you’re getting a large upfront JS payload followed by smaller GraphQL data transfers to navigate additional pages. For a site that typically only experiences one page view per session (to view details about an upcoming meetup), it’s important to maintain a trim initial page weight.&lt;/p&gt;
&lt;p&gt;Aaron kindly mentioned that &lt;a href=&quot;https://11ty.dev/&quot;&gt;Eleventy (11ty)&lt;/a&gt; might be a better fit.&lt;/p&gt;
&lt;h2 id=&quot;3.-the-pivot&quot;&gt;3. The pivot &lt;/h2&gt;
&lt;p&gt;Changing horses from Gatsby to Eleventy was relatively uneventful. I quickly ported over the Bulma CSS and the posts with the newly standardized YAML front matter. Migrating the Gatsby guts was a bit more delicate but once on Eleventy, everything was gravy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The &lt;a href=&quot;https://liquidjs.com/&quot;&gt;LiquidJS templating language&lt;/a&gt; used by Eleventy is a port of the very same Liquid language that Jekyll uses. Direct migrations from Jekyll to Eleventy are relatively seamless (with a few exceptions, of course).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once I switched to Eleventy, things got even easier. Working with Eleventy is a joy. For the most part, things just make sense. The community is vibrant and ready to help when things don’t make so much sense.&lt;/p&gt;
&lt;h3 id=&quot;github-actions&quot;&gt;GitHub Actions &lt;/h3&gt;
&lt;p&gt;While a JavaScript SSG is pretty exciting, this site needed to build and deploy whenever the master branch was updated. Jekyll did this out of the box and it meant that organizers could update meetup details from their mobile devices and see the changes live on the site within minutes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.github.com/en/actions&quot;&gt;GitHub Actions&lt;/a&gt; adds the ability to spin up a server to run builds, tests, deployments, etc. based on repo events such as pull requests or merges.&lt;/p&gt;
&lt;p&gt;Setting up the AustinJS workflow was absolutely painless (see &lt;a href=&quot;https://stedman.dev/2020/04/29/make-the-jump-from-jekyll-to-javascript/&quot;&gt;Make the Jump from Jekyll to JavaScript&lt;/a&gt;) and has been running like a tank ever since.&lt;/p&gt;
&lt;h3 id=&quot;enhancements&quot;&gt;Enhancements &lt;/h3&gt;
&lt;p&gt;Once the basics were nailed down, there was time to add even more value.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://austinjavascript.com/&quot;&gt;home&lt;/a&gt; page: add an Austin skyline hero (to make a place connection) and a roll-call of past speakers/presentations (to make a people connection)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://austinjavascript.com/contributing/&quot;&gt;contributing&lt;/a&gt; page: add a page to help presenters, sponsors, hosts, and others get more involved&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://austinjavascript.com/posts/meetups/&quot;&gt;meetup&lt;/a&gt; posts: add videos and slide decks from past presentations&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://austinjavascript.com/feed.xml&quot;&gt;RSS feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SSL/CI/CDN services: switch to GitHub and remove Cloudflare and Travis dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;image browser-window&quot;&gt;
  &lt;img src=&quot;https://stedman.dev/assets/img/posts/austinjs-2020.png&quot; alt=&quot;Austin JavaScript, 2020&quot; /&gt;
  &lt;figcaption&gt;AustinJavaScript.com, circa 2020&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;goals-review&quot;&gt;Goals review &lt;/h3&gt;
&lt;p&gt;I reviewed the &lt;a href=&quot;https://stedman.dev/2020/07/23/austin-javascript-case-study/#goals&quot;&gt;goals&lt;/a&gt; one last time:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;✅ maintain content parity&lt;/li&gt;
&lt;li&gt;✅ keep all of Jekyll’s ease of use&lt;/li&gt;
&lt;li&gt;✅ keep the lightweight and responsive static pages&lt;/li&gt;
&lt;li&gt;✅ keep GitHub Pages’ auto build and deploys&lt;/li&gt;
&lt;li&gt;✅ improve the contributor experience&lt;/li&gt;
&lt;li&gt;✅ improve the user experience&lt;/li&gt;
&lt;li&gt;✅ reduce dependencies&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With all the boxes checked, it was time to launch.&lt;/p&gt;
&lt;h2 id=&quot;4.-the-launch&quot;&gt;4. The Launch &lt;/h2&gt;
&lt;p&gt;This launch called for the development branch to be merged into the main branch and then setting up the Actions workflow to automate future build/deployments. Simple tasks, but replacing engines while the old one still works is always a scary move. I pressed the buttons and hoped for the best.&lt;/p&gt;
&lt;p&gt;I saw source code.&lt;/p&gt;
&lt;p&gt;All that showed up on the AustinJS site was source code for the index page. Was there something I missed in an Eleventy config? Was something wrong with the Actions workflow?&lt;/p&gt;
&lt;p&gt;Another hour of testing and research revealed that this repo didn’t have the same ability to deploy to &lt;code&gt;gh-pages&lt;/code&gt; branch as my demo site. Huh? A bit &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/about-github-pages#publishing-sources-for-github-pages-sites&quot;&gt;more research&lt;/a&gt; revealed that &lt;code&gt;&amp;lt;org_name&amp;gt;.github.io&lt;/code&gt; type repos can only deploy to &lt;code&gt;master&lt;/code&gt;. There weren’t many options. Change the &lt;code&gt;austinjavascript.github.io&lt;/code&gt; repo name or give up and return to Jekyll.&lt;/p&gt;
&lt;p&gt;I got on a short call with Aaron and went through the options. We decided to rename the repo to &lt;code&gt;austinjavascript.com&lt;/code&gt; and break the logjam. A few short moments later, the new site was live.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;/h2&gt;
&lt;p&gt;Since the launch, the site has run flawlessly. It builds a bit faster than the old Jekyll engine but you’d be hard-pressed to find any other deployment differences.&lt;/p&gt;
&lt;p&gt;I set out to improve the AustinJS user/contributor experience and bury the &lt;a href=&quot;https://github.com/austinjavascript/austinjavascript.com/blob/v2-eol/README.md#previewing-changes&quot;&gt;cruel Ruby joke&lt;/a&gt;. With special thanks to Aaron Stacey and Kevin Kipp for their help, I believe I succeeded. At long last, Austin JavaScript can proudly say that, with regards to JavaScript, it is &lt;a href=&quot;https://en.wikipedia.org/wiki/Eating_your_own_dog_food&quot;&gt;eating it’s own dog food&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Watching Sass in Eleventy</title>
    <link href="https://stedman.dev/2020/05/11/watching-sass-in-eleventy/"/>
    <id>https://stedman.dev/2020/05/11/watching-sass-in-eleventy/</id>
    <published>2021-09-06T21:32:52Z</published>
    <updated>2021-09-06T21:32:52Z</updated>
    <content type="html">&lt;p&gt;I’ve been using &lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;node-sass&lt;/a&gt; in my &lt;a href=&quot;https://11ty.dev/&quot;&gt;11ty&lt;/a&gt; workflow for awhile now but haven’t been able to get the &lt;code&gt;--watch&lt;/code&gt; flag to work to my satisfaction. For instance, while Browsersync automatically refreshes the browser for content and template changes, it didn’t rebuild my Sass files and then refresh the browser.&lt;/p&gt;
&lt;p&gt;Well, I finally had enough of the manual labor and found &lt;a href=&quot;https://dev.to/mathieuhuot/processing-sass-with-11ty-5a09&quot;&gt;a Mathieu Huot solution&lt;/a&gt; that sorta worked for me. I made a few tweaks that I hope he doesn’t mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I don’t have a lot of Sass files to process and my render times were in the 125ms range. So I chose the simplicity of a synchronous process instead of a promise-based one. Bonus: I get to skip a dependency (&lt;code&gt;fs-extra&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Rather than introduce an environment variable (e.g., &lt;code&gt;dev&lt;/code&gt;) to toggle the start of this script (and prevent it running it in production), I look for the &lt;code&gt;--watch&lt;/code&gt; process argument. It’s present when Eleventy is fired up in dev mode: &lt;code&gt;node eleventy --serve --watch&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;UPDATE (2020-09-15): I recently came across an &lt;a href=&quot;https://egghead.io/lessons/11ty-add-sass-compiling-and-watch-for-changes-in-eleventy-11ty&quot;&gt;Egghead tutorial on Sass compiling&lt;/a&gt; that may work better for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;let%E2%80%99s-go&quot;&gt;Let’s go &lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make sure &lt;code&gt;node-sass&lt;/code&gt; is installed.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save-dev node-sass&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open a new file, name it &lt;code&gt;_includes/sass-watch.js&lt;/code&gt;, and drop in the following code.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sass &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;node-sass&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt; * Render and save the Sass to CSS.&lt;br /&gt; * @param  {string}  sassPath     The Sass input path.&lt;br /&gt; * @param  {string}  cssFilePath  The CSS output file path.&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;buildCss&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;sassPath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cssFilePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Render CSS from Sass source path.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rendered &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sass&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; file&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; sassPath &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Save CSS to output path.&lt;/span&gt;&lt;br /&gt;  fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writeFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cssFilePath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rendered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;css&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;writeErr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;writeErr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; writeErr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;CSS file saved: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;cssFilePath&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; (in &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;rendered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stats&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;duration&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;ms)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt; * Initialize and watch Sass for changes requiring a build.&lt;br /&gt; * @param  {string}  sassPath     The Sass input path.&lt;br /&gt; * @param  {string}  cssFilePath  The CSS output file path.&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;sassPath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cssFilePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// If CSS output directory doesn&#39;t already exist, make it.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;existsSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cssFilePath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Creating new CSS directory: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cssFilePath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Create output directory.&lt;/span&gt;&lt;br /&gt;    fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cssFilePath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; recursive&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;mkdirErr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mkdirErr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; mkdirErr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;CSS directory created.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Build CSS on startup.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;buildCss&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sassPath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cssFilePath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Watch for changes to Sass directory.&lt;/span&gt;&lt;br /&gt;  fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sassPath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;evType&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SCSS file changed: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sassPath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;filename&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Rebuild the CSS.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;buildCss&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sassPath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cssFilePath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit &lt;code&gt;.eleventy.js&lt;/code&gt; so that it now includes the following &lt;code&gt;sass-watch&lt;/code&gt; bits.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sassWatch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./_includes/sass-watch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Run only when 11ty is in watch mode.&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;--watch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token comment&quot;&gt;// Watch Sass directory for updates.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;sassWatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./src/_sass/_main.scss&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./dist/css/main.css&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Refresh the browser when there are updates in the Sass directory.&lt;/span&gt;&lt;br /&gt;    eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addWatchTarget&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./src/_sass/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The config for the command line and VSCode is no different from the standard setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Command line: &lt;code&gt;package.json&lt;/code&gt; start script:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;eleventy --serve --watch&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VSCode: &lt;code&gt;.vscode/launch.json&lt;/code&gt; script:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Launch 11ty&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;cwd&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;${workspaceFolder}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;runtimeExecutable&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;npm&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;runtimeArgs&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start Eleventy again via command line (&lt;code&gt;npm start&lt;/code&gt;) or VSCode via the Debugger, all subsequent changes to Sass files should initiate an automatic build and the browser should refresh with the changes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;/h2&gt;
&lt;p&gt;I sincerely hope there’s a better solution for kicking-off Sass builds on file change events. If you know of a better way, please reach out on &lt;a href=&quot;https://twitter.com/stedman&quot;&gt;Twitter @stedman&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Until then, I’ll be happily updating Sass and watching the changes show up in my browser.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Make the Jump from Jekyll to JavaScript</title>
    <link href="https://stedman.dev/2020/04/29/make-the-jump-from-jekyll-to-javascript/"/>
    <id>https://stedman.dev/2020/04/29/make-the-jump-from-jekyll-to-javascript/</id>
    <published>2021-09-06T21:32:52Z</published>
    <updated>2021-09-06T21:32:52Z</updated>
    <content type="html">&lt;p&gt;With the recent addition of &lt;a href=&quot;https://github.com/features/actions&quot;&gt;Actions&lt;/a&gt; to GitHub’s product lineup, we now have the ability to create a &lt;em&gt;100% Pure, Unfiltered™&lt;/em&gt; JavaScript alternative to Jekyll (and Ruby) in GitHub Pages. This is a big deal. Really.&lt;/p&gt;
&lt;h2 id=&quot;back-story&quot;&gt;Back story &lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, for the uninitiated, are public web pages automatically generated from your GitHub source files and freely hosted on &lt;a href=&quot;http://github.io/&quot;&gt;github.io&lt;/a&gt; or your custom domain. There are no servers to provision and no databases to set up.&lt;/p&gt;
&lt;p&gt;The automatic generation part is handled by &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, a pretty sweet static site generator. It’s been around quite awhile, is battle tested, and is backed by a huge community. It’s also simple enough for beginners and yet powerful enough for advanced users. Unfortunately, customizing it requires running it locally and this is where things get sticky. Jekyll is based on Ruby. For casual users, Ruby is a challenge to set up and maintain—especially on Windows. Scaling is also an issue for Jekyll/Ruby as bigger builds are notorious for taking a long time to compile.&lt;/p&gt;
&lt;p&gt;While there are plenty of competitive static site generators out there, the one piece that was missing was the integrated of build and deploy to GitHub’s web server. Pages+Jekyll took care of that build and deploy mumbo-jumbo for you, automagically. Just commit to the &lt;code&gt;gh-pages&lt;/code&gt; branch and &lt;strong&gt;poof&lt;/strong&gt;, your site is updated.&lt;/p&gt;
&lt;p&gt;More recently, workarounds from &lt;a href=&quot;https://netlify.com/&quot;&gt;Netlify&lt;/a&gt; and others have popped up. They handle build/deploy and offer additional features worth considering, but at the end of the day they are yet another dependency to maintain.&lt;/p&gt;
&lt;p&gt;If only we could run a static site generator on Pages with all the hooks and privileges of Jekyll but with the ease-of-setup and performance provided by more modern alternatives.&lt;/p&gt;
&lt;p&gt;Well, now you can. All the pieces have finally fallen into place.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; If you’re working with GitHub &lt;strong&gt;user&lt;/strong&gt; or &lt;strong&gt;organization&lt;/strong&gt; sites, you can only &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/about-github-pages#publishing-sources-for-github-pages-sites&quot;&gt;publish from the &lt;code&gt;master&lt;/code&gt; branch&lt;/a&gt;. This effectively prevents alternative GitHub Pages deployments such as the one described below for those types of sites.&lt;/p&gt;
&lt;p&gt;What are &lt;strong&gt;user&lt;/strong&gt; or &lt;strong&gt;organization&lt;/strong&gt; sites? Those are the sites that publish from repos named &lt;code&gt;&amp;lt;user&amp;gt;.github.io&lt;/code&gt; (or &lt;code&gt;&amp;lt;organization&amp;gt;.github.io&lt;/code&gt;) and have URLs that look like &lt;code&gt;https://&amp;lt;user&amp;gt;.github.io/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All other repos are considered &lt;strong&gt;project&lt;/strong&gt; sites. The deploy steps defined in this tutorial will work with those sites since they can &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/about-github-pages#publishing-sources-for-github-pages-sites&quot;&gt;publish from the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;the-build&quot;&gt;The build &lt;/h2&gt;
&lt;p&gt;This brief tutorial will cover the essentials of migrating from Jekyll to JavaScript. The following are required to get started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/&quot;&gt;GitHub account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; set up locally&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, it would also make sense to already have an existing Jekyll repo. If not, then &lt;a href=&quot;https://github.com/new/&quot;&gt;create a new GitHub repo&lt;/a&gt; (public or private) with a README initialized. Follow the follow-up instructions to clone and set it up locally.&lt;/p&gt;
&lt;h3 id=&quot;set-up-the-static-site-generator&quot;&gt;Set up the static site generator &lt;/h3&gt;
&lt;p&gt;It took awhile for someone to distill the essence of Jekyll into JavaScript. With &lt;a href=&quot;https://11ty.dev/&quot;&gt;Eleventy&lt;/a&gt;, Zach Leatherman (&lt;a href=&quot;https://twitter.com/zachleat&quot;&gt;@zachleat&lt;/a&gt;) has really distilled, bottled, and shipped it. Oh, and did I mention that it’s fast? I’ll skip the rest of the sales pitch here and let the experts do the talking.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://daverupert.com/2019/08/what-i-like-about-eleventy/&quot;&gt;Dave Rupert: What I Like About Eleventy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://iandroid.eu/why-im-digging-eleventy/&quot;&gt;iandroid: Why I’m Digging Eleventy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://24ways.org/2018/turn-jekyll-up-to-eleventy/&quot;&gt;Paul Lloyd: Turn Jekyll Up to Eleventy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you haven’t already guessed, I’m smitten with Eleventy. It’s that multi-purpose knife that fits just perfectly in your pocket and makes you smile every time you use it.&lt;/p&gt;
&lt;p&gt;It also makes the transition from Jekyll to JavaScript almost completely seamless. So let’s roll with it.&lt;/p&gt;
&lt;h4&gt;Install and configure&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open a terminal and navigate to your repo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you don’t already have a &lt;code&gt;package.json&lt;/code&gt; file in the root directory, then take this moment to initialize npm.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; init&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Eleventy as a &lt;code&gt;devDependency&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save-dev @11ty/eleventy&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To the site root, add an empty &lt;code&gt;.nojekyll&lt;/code&gt; file to &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/about-github-pages#static-site-generators&quot;&gt;disable the default Jekyll build&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; .nojekyll&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keeping things simple, we’ll assume a &lt;a href=&quot;https://jekyllrb.com/docs/structure/&quot;&gt;default Jekyll file structure&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;br /&gt;├── _layouts&lt;br /&gt;│   ├── default.html&lt;br /&gt;├── assets&lt;br /&gt;│   ├── css&lt;br /&gt;│   ├── images&lt;br /&gt;│   └── js&lt;br /&gt;├── index.html&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To the site root, add a &lt;code&gt;.eleventy.js&lt;/code&gt; config file with the following contents. For more details, see the &lt;a href=&quot;https://www.11ty.dev/docs/config/&quot;&gt;Eleventy configuration docs&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// Copy the &quot;assets&quot; directory to the compiled &quot;_site&quot; folder.&lt;/span&gt;&lt;br /&gt;  eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addPassthroughCopy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;assets&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    dir&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      input&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      output&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./_site&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      layouts&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./_layouts&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    templateFormats&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&#39;html&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&#39;liquid&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&#39;md&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&#39;njk&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    pathPrefix&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/&amp;lt;repo_name&gt;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// omit this line if using custom domain&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at the &lt;code&gt;dir.output&lt;/code&gt; above, notice that we are maintaining parity with Jekyll’s deployment, using the &lt;code&gt;./_site&lt;/code&gt; directory for our compiled code.&lt;/p&gt;
&lt;p&gt;Also note that, unless you’re using a &lt;a href=&quot;https://stedman.dev/2020/04/29/make-the-jump-from-jekyll-to-javascript/#the-custom-domain&quot;&gt;custom domain&lt;/a&gt;, you’ll need to add a &lt;a href=&quot;https://www.11ty.dev/docs/config/#deploy-to-a-subdirectory-with-a-path-prefix&quot;&gt;path prefix&lt;/a&gt; (&lt;code&gt;/&amp;lt;repo_name&amp;gt;/&lt;/code&gt;) to the config options. This is because &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/about-github-pages#types-of-github-pages-sites&quot;&gt;project sites&lt;/a&gt; are hosted on subdirectory URLs that look like &lt;code&gt;https://&amp;lt;user&amp;gt;.github.io/&amp;lt;repo_name&amp;gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To the &lt;code&gt;scripts&lt;/code&gt; section of &lt;code&gt;package.json&lt;/code&gt;, add the following. We’ll need the &lt;code&gt;build&lt;/code&gt; script for our deployment later.&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;clean&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rm -rf ./_site&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;npm run clean &amp;amp;&amp;amp; eleventy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;eleventy --serve --watch&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;clean&lt;/strong&gt;: empties out the deployment directory&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;build&lt;/strong&gt;: cleans the deploy directory and builds the site with Eleventy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start&lt;/strong&gt;: runs Eleventy in developer mode with live browser refreshes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;the-deployment&quot;&gt;The deployment &lt;/h2&gt;
&lt;p&gt;Now for the real magic sauce, &lt;a href=&quot;https://docs.github.com/en/actions&quot;&gt;GitHub Actions&lt;/a&gt;-style.&lt;/p&gt;
&lt;h3 id=&quot;set-up-a-workflow&quot;&gt;Set up a workflow &lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open a browser to your GitHub repo and then select the &lt;strong&gt;Actions&lt;/strong&gt; tab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tap on the &lt;strong&gt;New workflow&lt;/strong&gt; button.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tap on the &lt;strong&gt;Set up a workflow yourself&lt;/strong&gt; button.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;strong&gt;{repo_name}/.github/workflows/&lt;code&gt;main.yml&lt;/code&gt;&lt;/strong&gt; field, enter “&lt;code&gt;eleventy_build.yml&lt;/code&gt;”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Into the &lt;strong&gt;Edit new file&lt;/strong&gt; textarea, cut and paste the following:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Eleventy Build&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# Controls when the action will run. Triggers the workflow on push or pull request&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# events but only for the master branch&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; master &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;# This workflow contains a single job called &quot;build&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;# The type of runner that the job will run on&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v2&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Setup Node.js environment&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;node@v1.4.1&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install packages&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm ci&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Run npm build&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run build&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy to gh&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; peaceiris/actions&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;gh&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages@v3&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;deploy_key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.ACTIONS_DEPLOY_KEY &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;publish_dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ./_site&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tap the &lt;strong&gt;Start commit&lt;/strong&gt; button.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Complete the &lt;strong&gt;Commit new file&lt;/strong&gt; form and select &lt;strong&gt;Commit directly to the &lt;code&gt;master&lt;/code&gt; branch&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The workflow script should be fairly self-descriptive. See that &lt;code&gt;${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/code&gt; line near the end of the workflow? We need to add deploy keys to GitHub before attempting a deployment.&lt;/p&gt;
&lt;h3 id=&quot;set-up-deployment-keys&quot;&gt;Set up deployment keys &lt;/h3&gt;
&lt;p&gt;The following instructions were cribbed from a third-party &lt;a href=&quot;https://github.com/marketplace/actions/github-pages-action#%EF%B8%8F-create-ssh-deploy-key&quot;&gt;GitHub Actions for GitHub Pages&lt;/a&gt; page. Please check that site for updates before proceeding as these instructions may have changed.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generate a SSH key locally to use as your deploy key.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;ssh-keygen -t rsa -b &lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; -C &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config user.email&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt; -f gh-pages -N &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# You will get 2 files:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;#   gh-pages.pub (public key)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;#   gh-pages     (private key)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open a browser to your repo and select the &lt;strong&gt;Settings&lt;/strong&gt; tab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;strong&gt;Deploy keys&lt;/strong&gt; from the left menu.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tap the &lt;strong&gt;Add deploy key&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Title&lt;/strong&gt; field, enter “&lt;code&gt;Public key of ACTIONS_DEPLOY_KEY&lt;/code&gt;”.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Key&lt;/strong&gt; field, cut and paste the contents of your &lt;code&gt;gh-pages.pub&lt;/code&gt; SSH key file made in step 1 above.&lt;/li&gt;
&lt;li&gt;Check the &lt;strong&gt;Allow write access&lt;/strong&gt; box.&lt;/li&gt;
&lt;li&gt;Tap the &lt;strong&gt;Add key&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;strong&gt;Secrets&lt;/strong&gt; from the left menu.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tap the &lt;strong&gt;Add a new secret&lt;/strong&gt; link.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Name&lt;/strong&gt; field, enter “&lt;code&gt;ACTIONS_DEPLOY_KEY&lt;/code&gt;”.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Value&lt;/strong&gt; field, cut and paste the contents of your &lt;code&gt;gh-pages&lt;/code&gt; SSH key file from step 1 above.&lt;/li&gt;
&lt;li&gt;Tap the &lt;strong&gt;Add secret&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;IMPORTANT: Delete the local &lt;code&gt;gh-pages&lt;/code&gt; keys at this point. You certainly do not want to add them to your version control (for all to see).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To initiate a deployment, commit/merge to the &lt;code&gt;master&lt;/code&gt; branch. The first deploy will fail (because the &lt;code&gt;gh-pages&lt;/code&gt; branch has not been created yet).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go back to the &lt;strong&gt;Settings&lt;/strong&gt; tab.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Scroll down to the &lt;strong&gt;GitHub Pages&lt;/strong&gt; section.&lt;/li&gt;
&lt;li&gt;From the &lt;strong&gt;Source&lt;/strong&gt; options, select &lt;code&gt;gh-pages branch&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Merge some more code into &lt;code&gt;master&lt;/code&gt; to initiate another deploy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Congrats. You’re done! From here on out, you should be able to trigger a fresh build and deploy by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;working/saving locally, committing, and pushing to &lt;code&gt;origin master&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;editing your code at &lt;a href=&quot;http://github.com/&quot;&gt;github.com&lt;/a&gt; and saving to &lt;code&gt;master&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your updates will deploy to live in mere seconds. All of this takes place within the ecosystem that you version your code in. There are no additional dependencies, no additional accounts, nada. How cool is that?&lt;/p&gt;
&lt;h2 id=&quot;the-custom-domain&quot;&gt;The custom domain &lt;/h2&gt;
&lt;p&gt;GitHub provides &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/about-github-pages#types-of-github-pages-sites&quot;&gt;project sites&lt;/a&gt; (e.g., &lt;code&gt;https://&amp;lt;user&amp;gt;.github.io/&amp;lt;repo_name&amp;gt;/&lt;/code&gt;) that may suit you just fine. If, however, you want to use a custom domain (e.g., &lt;code&gt;https://example.com/&lt;/code&gt;), there’s a bit more work involved.&lt;/p&gt;
&lt;h3 id=&quot;set-up-a-custom-domain&quot;&gt;Set up a custom domain &lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you haven’t already set up an apex domain (e.g., &lt;code&gt;example.com&lt;/code&gt;) for this repo, then you will need to add it. Follow the &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site&quot;&gt;GitHub instructions for managing a custom domain&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;CNAME&lt;/code&gt; file created when you entered your domain in the &lt;strong&gt;Custom domain&lt;/strong&gt; field (above) needs to be included in our distribution directory.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open the &lt;code&gt;gh-pages&lt;/code&gt; branch and copy the &lt;code&gt;CNAME&lt;/code&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go back to the &lt;code&gt;master&lt;/code&gt; branch and add that &lt;code&gt;CNAME&lt;/code&gt; file to the source directory (in this case, the root directory).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the &lt;code&gt;.eleventy.js&lt;/code&gt; config file and add the CNAME file to the list of pass-through copies.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br /&gt;  eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addPassthroughCopy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;CNAME&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save, commit, and push to origin.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;/h2&gt;
&lt;p&gt;For 12 years, GitHub teased us with a web hosting product that almost did everything we needed. We were grateful and we made due. Along the way, we came up with hacks and workarounds, employing one or more outside services to complete the task. But nothing quite combined source code versioning, flexible site generation, and web hosting in one elegant package.&lt;/p&gt;
&lt;p&gt;With Eleventy and GitHub Actions, we now have it all.&lt;/p&gt;
</content>
  </entry>
</feed>
